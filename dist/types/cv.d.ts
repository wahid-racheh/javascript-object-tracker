import { ICoordinate, IImage, IBlurStack, IPoint, IRect } from './interfaces';
export declare const blurStack: () => IBlurStack;
export declare const getImage: (image?: IImage | undefined) => IImage;
export declare const grayscaleOld: (imageSrc: IImage, imageDst: IImage) => IImage;
export declare const grayscale: (imageSrc: IImage, imageDst: IImage) => IImage;
export declare const threshold: (imageSrc: IImage, imageDst: IImage, threshold: number) => IImage;
export declare const stackBoxBlur: (imageSrc: IImage, imageDst: IImage, kernelSize: number) => IImage;
export declare const adaptiveThreshold: (imageSrc: IImage, imageDst: IImage, kernelSize: number, threshold: number) => IImage;
export declare const otsu: (imageSrc: IImage) => number;
export declare const gaussianKernel: (kernelSize: number) => any[];
export declare const gaussianBlurFilter: (imageSrc: IImage, imageDst: IImage, kernel: any[], horizontal: boolean) => IImage;
export declare const gaussianBlur: (imageSrc: IImage, imageDst: IImage, imageMean: IImage, kernelSize: number) => IImage;
export declare const binaryBorder: (imageSrc: IImage, dst: any[]) => any[];
export declare const neighborhoodDeltas: (width: number) => any[];
export declare const borderFollowing: (src: any[], pos: number, nbd: number, point: any, hole: boolean, deltas: any[]) => any[];
export declare const findContours: (imageSrc: IImage, binary: any[]) => any[];
export declare const approxPolyDP: (contour: any, epsilon: number) => any[];
export declare const isContourConvex: (contour: any) => boolean;
export declare const getRectSize: (x: number, y: number, tl: IPoint, tr: IPoint, bl: IPoint, br: IPoint) => IRect;
export declare const findCornersPosition: (contour: any) => IRect;
export declare const minEdgeLength: (poly: any) => number;
export declare const findCandidates: (contours: any[], minSize: number, epsilon: number, minLength: number, minLimit: number) => any[];
export declare const detectContour: (image: IImage, ceil: number) => any;
export declare const square2quad: (src: IPoint[]) => any[];
export declare const getPerspectiveTransform: (src: IPoint[], size: number) => any;
export declare const warp: (imageSrc: IImage, imageDst: IImage, contour: any, warpSize: number) => IImage;
export declare const perimeter: (poly: any) => number;
export declare const countNonZero: (imageSrc: IImage, square: IPoint) => number;
export declare const isValidPoint: (p1: IRect, p2: IRect, ceil: number) => boolean;
export declare const diff: (num1: number, num2: number) => number;
export declare const distance: (x1: number, x2: number, y1: number, y2: number) => number;
export declare const getRectCoordinates: (x: number, y: number, width: number, height: number, radius?: any) => IRect;
export declare const drawRect: (ctx: any, x: number, y: number, width: number, height: number, lineWidth: number, color: string, radius?: any, fill?: any, stroke?: boolean | undefined) => void;
export declare const getOutsideRectCoordinates: (ceil: number, contextWidth: number, rectTopLeftX: number, rectTopLeftY: number, rectTopRightX: number, rectTopRightY: number, rectBottomLeftY: number, rectWidth: number, rectHeight: number) => ICoordinate;
export declare const clipRect: (ctx: any, coordinates: ICoordinate, color: any) => void;
export declare const getColor: (imageData: any, x: number, y: number, width: number) => string;
export declare const cropImage: (ctx: any, x: number, y: number, w: number, h: number, scale?: number | undefined) => HTMLCanvasElement;
