import { IDetector } from './interfaces';
export default class Detector {
    private ceil;
    private width;
    private height;
    private lineWidth;
    private dpi;
    private rectBorderDefaultColor;
    private rectBorderColorSuccess;
    private rectBorderColorError;
    private outsideBackgroundColor;
    private drawContour;
    private isImageCaptured;
    private mimeType;
    private imageExtension;
    private originalCanvas;
    private cropContainer;
    private outsideRectCoordinates;
    private imageData;
    private strokeColor;
    private currentStream;
    private videoInputList;
    private raf;
    private roundRectX;
    private roundRectY;
    private roundRectWidth;
    private roundRectHeight;
    private ratio;
    private formattedRatio;
    constructor(options: IDetector);
    initRectRatio(ratio: number, w: number, h: number, ceil: number): any;
    initRectCoordinates(): void;
    putImageData(context: any, video: any): void;
    drawRectangle(context: any): void;
    detect(context: any, callback: Function): void;
    findObject(context: any, contours: Array<any>[], x: number, y: number, callback: Function): void;
    drawContours(context: any, contour: any, x: number, y: number): void;
    cropImage(context: any): any;
    resizeCanvas(callback: Function): void;
    download(imageName: string, imageData: any): void;
    convertBase64toFile(imageName: string, base64Data: string, callback: any): void;
    stopMediaTracks(stream: any): void;
    gotDevices(mediaDevices: Array<any>[]): void;
    getCamera(isDesktop: boolean, resolve: any, reject: any): void;
    requestAnimationFrame(tick: any): void;
    cancelAnimationFrame(): void;
}
